pragma solidity ^0.4.24;

interface ERC721Interface {
    function safeTransferFrom(address _from, address _to, string _tokenVIN, bytes _data) public;
    function getSerializedData (string _tokenId) public view returns (bytes);
    // demolishToken (string token_id) external;
    function transferFrom(address _from, address _to, string _tokenVIN) public;
    function recoveryToken (address owner, string token_id, bytes data) external;
}

contract BytesToTypes {
    

    function bytesToAddress(uint _offst, bytes memory _input) internal pure returns (address _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }   
    } 
    
    function bytesToBool(uint _offst, bytes memory _input) internal pure returns (bool _output) {
        
        uint8 x;
        assembly {
            x := mload(add(_input, _offst))
        }
        x==0 ? _output = false : _output = true;
    }   
        
    function getStringSize(uint _offst, bytes memory _input) internal pure returns(uint size){
        
        assembly{
            
            size := mload(add(_input,_offst))
            let chunk_count := add(div(size,32),1) // chunk_count = size/32 + 1
            
            if gt(mod(size,32),0) {// if size%32 > 0
                chunk_count := add(chunk_count,1)
            } 
            
             size := mul(chunk_count,32)// first 32 bytes reseves for size in strings
        }
    }

    function bytesToString(uint _offst, bytes memory _input, bytes memory _output) internal  {

        uint size = 32;
        assembly {
            let loop_index:= 0
                  
            let chunk_count
            
            size := mload(add(_input,_offst))
            chunk_count := add(div(size,32),1) // chunk_count = size/32 + 1
            
            if gt(mod(size,32),0) {
                chunk_count := add(chunk_count,1)  // chunk_count++
            }
                
            
            loop:
                mstore(add(_output,mul(loop_index,32)),mload(add(_input,_offst)))
                _offst := sub(_offst,32)           // _offst -= 32
                loop_index := add(loop_index,1)
                
            jumpi(loop , lt(loop_index , chunk_count))
            
        }
    }

    function bytesToBytes32(uint _offst, bytes memory  _input, bytes32 _output) internal pure {
        
        assembly {
            mstore(_output , add(_input, _offst))
            mstore(add(_output,32) , add(add(_input, _offst),32))
        }
    }
    
    function bytesToInt8(uint _offst, bytes memory  _input) internal pure returns (int8 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }
    
    function bytesToInt16(uint _offst, bytes memory _input) internal pure returns (int16 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt24(uint _offst, bytes memory _input) internal pure returns (int24 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt32(uint _offst, bytes memory _input) internal pure returns (int32 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt40(uint _offst, bytes memory _input) internal pure returns (int40 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt48(uint _offst, bytes memory _input) internal pure returns (int48 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt56(uint _offst, bytes memory _input) internal pure returns (int56 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt64(uint _offst, bytes memory _input) internal pure returns (int64 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt72(uint _offst, bytes memory _input) internal pure returns (int72 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt80(uint _offst, bytes memory _input) internal pure returns (int80 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt88(uint _offst, bytes memory _input) internal pure returns (int88 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt96(uint _offst, bytes memory _input) internal pure returns (int96 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }
	
	function bytesToInt104(uint _offst, bytes memory _input) internal pure returns (int104 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }
    
    function bytesToInt112(uint _offst, bytes memory _input) internal pure returns (int112 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt120(uint _offst, bytes memory _input) internal pure returns (int120 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt128(uint _offst, bytes memory _input) internal pure returns (int128 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt136(uint _offst, bytes memory _input) internal pure returns (int136 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt144(uint _offst, bytes memory _input) internal pure returns (int144 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt152(uint _offst, bytes memory _input) internal pure returns (int152 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt160(uint _offst, bytes memory _input) internal pure returns (int160 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt168(uint _offst, bytes memory _input) internal pure returns (int168 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt176(uint _offst, bytes memory _input) internal pure returns (int176 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt184(uint _offst, bytes memory _input) internal pure returns (int184 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt192(uint _offst, bytes memory _input) internal pure returns (int192 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt200(uint _offst, bytes memory _input) internal pure returns (int200 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt208(uint _offst, bytes memory _input) internal pure returns (int208 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt216(uint _offst, bytes memory _input) internal pure returns (int216 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt224(uint _offst, bytes memory _input) internal pure returns (int224 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt232(uint _offst, bytes memory _input) internal pure returns (int232 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt240(uint _offst, bytes memory _input) internal pure returns (int240 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt248(uint _offst, bytes memory _input) internal pure returns (int248 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt256(uint _offst, bytes memory _input) internal pure returns (int256 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

	function bytesToUint8(uint _offst, bytes memory _input) internal pure returns (uint8 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

	function bytesToUint16(uint _offst, bytes memory _input) internal pure returns (uint16 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

	function bytesToUint24(uint _offst, bytes memory _input) internal pure returns (uint24 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

	function bytesToUint32(uint _offst, bytes memory _input) internal pure returns (uint32 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

	function bytesToUint40(uint _offst, bytes memory _input) internal pure returns (uint40 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

	function bytesToUint48(uint _offst, bytes memory _input) internal pure returns (uint48 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

	function bytesToUint56(uint _offst, bytes memory _input) internal pure returns (uint56 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

	function bytesToUint64(uint _offst, bytes memory _input) internal pure returns (uint64 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

	function bytesToUint72(uint _offst, bytes memory _input) internal pure returns (uint72 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

	function bytesToUint80(uint _offst, bytes memory _input) internal pure returns (uint80 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

	function bytesToUint88(uint _offst, bytes memory _input) internal pure returns (uint88 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

	function bytesToUint96(uint _offst, bytes memory _input) internal pure returns (uint96 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 
	
	function bytesToUint104(uint _offst, bytes memory _input) internal pure returns (uint104 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

    function bytesToUint112(uint _offst, bytes memory _input) internal pure returns (uint112 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

    function bytesToUint120(uint _offst, bytes memory _input) internal pure returns (uint120 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

    function bytesToUint128(uint _offst, bytes memory _input) internal pure returns (uint128 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

    function bytesToUint136(uint _offst, bytes memory _input) internal pure returns (uint136 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

    function bytesToUint144(uint _offst, bytes memory _input) internal pure returns (uint144 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

    function bytesToUint152(uint _offst, bytes memory _input) internal pure returns (uint152 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

    function bytesToUint160(uint _offst, bytes memory _input) internal pure returns (uint160 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

    function bytesToUint168(uint _offst, bytes memory _input) internal pure returns (uint168 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

    function bytesToUint176(uint _offst, bytes memory _input) internal pure returns (uint176 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

    function bytesToUint184(uint _offst, bytes memory _input) internal pure returns (uint184 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

    function bytesToUint192(uint _offst, bytes memory _input) internal pure returns (uint192 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

    function bytesToUint200(uint _offst, bytes memory _input) internal pure returns (uint200 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

    function bytesToUint208(uint _offst, bytes memory _input) internal pure returns (uint208 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

    function bytesToUint216(uint _offst, bytes memory _input) internal pure returns (uint216 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

    function bytesToUint224(uint _offst, bytes memory _input) internal pure returns (uint224 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

    function bytesToUint232(uint _offst, bytes memory _input) internal pure returns (uint232 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

    function bytesToUint240(uint _offst, bytes memory _input) internal pure returns (uint240 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

    function bytesToUint248(uint _offst, bytes memory _input) internal pure returns (uint248 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 

    function bytesToUint256(uint _offst, bytes memory _input) internal pure returns (uint256 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    } 
    
}

contract TypesToBytes {
 
    function TypesToBytes() internal {
        
    }
    function addressToBytes(uint _offst, address _input, bytes memory _output) internal pure {

        assembly {
            mstore(add(_output, _offst), _input)
        }
    }

    function bytes32ToBytes(uint _offst, bytes32 _input, bytes memory _output) internal pure {

        assembly {
            mstore(add(_output, _offst), _input)
            mstore(add(add(_output, _offst),32), add(_input,32))
        }
    }
    
    function boolToBytes(uint _offst, bool _input, bytes memory _output) internal pure {
        uint8 x = _input == false ? 0 : 1;
        assembly {
            mstore(add(_output, _offst), x)
        }
    }
    
    function stringToBytes(uint _offst, bytes memory _input, bytes memory _output) internal {
        uint256 stack_size = _input.length / 32;
        if(_input.length % 32 > 0) stack_size++;
        
        assembly {
            let index := 0
            stack_size := add(stack_size,1)//adding because of 32 first bytes memory as the length
        loop:
            
            mstore(add(_output, _offst), mload(add(_input,mul(index,32))))
            _offst := sub(_offst , 32)
            index := add(index ,1)
            jumpi(loop , lt(index,stack_size))
        }
    }

    function intToBytes(uint _offst, int _input, bytes memory  _output) internal pure {

        assembly {
            mstore(add(_output, _offst), _input)
        }
    } 
    
    function uintToBytes(uint _offst, uint _input, bytes memory _output) internal pure {

        assembly {
            mstore(add(_output, _offst), _input)
        }
    }   

}

contract  SizeOf {
    
    function sizeOfString(string _in) internal pure  returns(uint _size){
        _size = bytes(_in).length / 32;
         if(bytes(_in).length % 32 != 0) 
            _size++;
            
        _size++; // first 32 bytes is reserved for the size of the string     
        _size *= 32;
    }

    function sizeOfInt(uint16 _postfix) internal pure  returns(uint size){

        assembly{
            switch _postfix
                case 8 { size := 1 }
                case 16 { size := 2 }
                case 24 { size := 3 }
                case 32 { size := 4 }
                case 40 { size := 5 }
                case 48 { size := 6 }
                case 56 { size := 7 }
                case 64 { size := 8 }
                case 72 { size := 9 }
                case 80 { size := 10 }
                case 88 { size := 11 }
                case 96 { size := 12 }
                case 104 { size := 13 }
                case 112 { size := 14 }
                case 120 { size := 15 }
                case 128 { size := 16 }
                case 136 { size := 17 }
                case 144 { size := 18 }
                case 152 { size := 19 }
                case 160 { size := 20 }
                case 168 { size := 21 }
                case 176 { size := 22 }
                case 184 { size := 23 }
                case 192 { size := 24 }
                case 200 { size := 25 }
                case 208 { size := 26 }
                case 216 { size := 27 }
                case 224 { size := 28 }
                case 232 { size := 29 }
                case 240 { size := 30 }
                case 248 { size := 31 }
                case 256 { size := 32 }
                default  { size := 32 }
        }

    }
    
    function sizeOfUint(uint16 _postfix) internal pure  returns(uint size){
        return sizeOfInt(_postfix);
    }

    function sizeOfAddress() internal pure  returns(uint8){
        return 20; 
    }
    
    function sizeOfBool() internal pure  returns(uint8){
        return 1; 
    }
    

}

contract Ownable {
  address public owner;


  event OwnershipRenounced(address indexed previousOwner);
  event OwnershipTransferred(
    address indexed previousOwner,
    address indexed newOwner
  );


  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  constructor() public {
    owner = msg.sender;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  /**
   * @dev Allows the current owner to relinquish control of the contract.
   * @notice Renouncing to ownership will leave the contract without an owner.
   * It will not be possible to call the functions with the `onlyOwner`
   * modifier anymore.
   */
  function renounceOwnership() public onlyOwner {
    emit OwnershipRenounced(owner);
    owner = address(0);
  }

  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param _newOwner The address to transfer ownership to.
   */
  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }

  /**
   * @dev Transfers control of the contract to a newOwner.
   * @param _newOwner The address to transfer ownership to.
   */
  function _transferOwnership(address _newOwner) internal {
    require(_newOwner != address(0));
    emit OwnershipTransferred(owner, _newOwner);
    owner = _newOwner;
  }
}

contract Seriality is BytesToTypes, TypesToBytes, SizeOf {

    function Seriality() public {

    }
}

contract Bridge is Ownable {
    
    address contact;
    uint consensus = 2;
    
    mapping (address => bool) recoverPermissions;
    mapping (address => bool) demolishPermissions;
    mapping (string => bytes32) tokenHashes;
    mapping (bytes32 => uint) validatorsCount;

    event userRequestForSignature(address owner, string tokenVIN, bytes data);
    event transferCompleted(address owner, string tokenVIN);
    
    modifier onlyAdmittedForRecover() {
        require (recoverPermissions[msg.sender] != false);
        _;
    }
    
    modifier onlyAdmittedForDemolish() {
        require (demolishPermissions[msg.sender] != false);
        _;
    }
    
    constructor(address main) public {
        contact = main;
    }
    
    function onERC721Received(address _from, string _tokenVIN, bytes data) external onlyAdmittedForDemolish {
        ERC721Interface(contact).transferFrom(_from, this, _tokenVIN);
        emit userRequestForSignature(_from, _tokenVIN, data);
    }
    
    function transferApprove(uint256 txHash, address owner, string _tokenVIN, bytes data) external onlyAdmittedForRecover {
        
       
        bytes32 tHash = getTransactionHash(txHash, owner, _tokenVIN, data);
        
        
        if (tokenHashes[_tokenVIN] == 0) {
            tokenHashes[_tokenVIN] = tHash;
            validatorsCount[tHash] += 1;
        } else if (tokenHashes[_tokenVIN] == tHash){
            validatorsCount[tHash] += 1;
        } 
        
        if (consensus == validatorsCount[tHash]){
             ERC721Interface(contact).recoveryToken(owner, _tokenVIN, data);
        emit transferCompleted(owner, _tokenVIN);
        }
       
     
    }
    
    function setPermissionToRecover (address user) external onlyOwner {
        recoverPermissions[user] = true;
    }
  
    function deniedPermissionToRecover (address user) external onlyOwner {
        recoverPermissions[user] = false;
    }
  
    function setPermissionToDemolish (address user) external onlyOwner {
        demolishPermissions[user] = true;
    }
  
    function deniedPermissionToDemolish (address user) external onlyOwner {
        demolishPermissions[user] = false;
    }
    
    function getTransactionHash(uint256 txHash, address _from, string _tokenVIN, bytes data) internal returns(bytes32) {
        return keccak256(txHash, _from, _tokenVIN, data);
    }
    
    function requiredAmountOfSigns(bytes32 tokenHash) internal {
        require(validatorsCount[tokenHash] >= consensus);
    }
}

contract ERC721Reciever{

    function onERC721Received(
        address _from,
        address _to,
        string _tokenVIN,
        bytes _data
    ) public returns(bytes4);
}

contract ERC721 is Seriality, Ownable, ERC721Interface {
    
    ///  This emits when ownership of any NFT changes by any mechanism.
    ///  This event emits when NFTs are created (`from` == 0) and destroyed
    ///  (`to` == 0). Exception: during contract creation, any number of NFTs
    ///  may be created and assigned without emitting Transfer. At the time of
    ///  any transfer, the approved address for that NFT (if any) is reset to none.
    event Transfer(address indexed _from, address indexed _to, string indexed _tokenId);

    /// This emits when the approved address for an NFT is changed or
    ///  reaffirmed. The zero address indicates there is no approved address.
    ///  When a Transfer event emits, this also indicates that the approved
    ///  address for that NFT (if any) is reset to none.
    event Approval(address indexed _owner, address indexed _approved, string indexed _tokenId);

    /// This emits when color for an NFT is changed.
    event tokenColorChanged(string indexed _tokenVIN, string _tokenColor);

    /// This emits when registration number for an NFT is changed.
    event tokenRegNumberChanged(string indexed _tokenVIN, string indexed _tokenRegNumber);
    
    event tokenDemolished(address indexed _owner, string indexed _tokenId);
    
    event tokenRecovered(address indexed _owner, string indexed _tokenId);
    
    

    // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`
    // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`
    bytes4 private constant ERC721_RECEIVED = 0x150b7a02;
    
    // Total number of token available on the blockchain
    uint256 public totalSupply;
    
    //Returns of data
    uint private constant BUFFER_LENGHT = 200;

    // Mapping from account to number of token it owns
    mapping (address => uint256) public balances;

    // Mapping from token VIN to its owner
    mapping (string => address) tokenOwner;

    // Maping from token VIN to approved account
    mapping (string => address) tokenApprovals;

    // Mapping from token VIN to its color
    mapping (string => string) private tokenColor;

    // Mapping from token VIN to its registration number
    mapping (string => string) private tokenRegNumber;
    
    
    constructor() public {
        totalSupply = 0;
    }

   // @dev Approves another address to transfer the given token VIN
   // The zero address indicates there is no approved address.
   // There can only be one approved address per token at a given time.
   // Can only be called by the token owner.
   // @param _to address to be approved for the given token VIN
   // @param _tokenVIN string VIN of the token to be approved
    function approve(address _approved, string _tokenVIN) public {
        address owner = ownerOf(_tokenVIN);
        require(owner == msg.sender);
        require(_approved != msg.sender);
        tokenApprovals[_tokenVIN] = _approved;
        emit Approval(owner, _approved, _tokenVIN);
    }

   // @dev Transfers the ownership of a given token VIN to another address
   // Requires the msg sender to be the owner or approved
   // @param _from current owner of the token
   // @param _to address to receive the ownership of the given token VIN
   // @param _tokenVIN string VIN of the token to be transferred
    function transferFrom(address _from, address _to, string _tokenVIN) public {
        require(_from != address(0) && _to != address(0));
        require(_from != _to);
        address owner = ownerOf(_tokenVIN);
        require(owner == _from);
        /*require(
            owner == msg.sender || 
            getApproved(_tokenVIN) == msg.sender || 
            demolishPermissions[msg.sender]
            );*/
        clearApproval(_from, _tokenVIN);
        removeTokenFrom(_from, _tokenVIN);
        addTokenTo(_to, _tokenVIN);
        emit Transfer(_from, _to, _tokenVIN);
    }

   // @dev Gets the balance of the specified address
   // @param _owner address to query the balance of
   // @return uint256 representing the amount owned by the passed address
    function balanceOf(address _owner) public view returns (uint256) {
        return balances[_owner];
    }

   // @dev Gets the owner of the specified token VIN
   // @param _tokenVIN string VIN of the token to query the owner of
   // @return owner address currently marked as the owner of the given token VIN
    function ownerOf(string _tokenVIN) public view returns (address) {
        return tokenOwner[_tokenVIN];
    }

   // @dev Gets the approved address for a token ID, or zero if no address set
   // @param _tokenVIN string VIN of the token to query the approval of
   // @return address currently approved for the given token VIN
    function getApproved(string _tokenVIN) public view returns (address) {
        return tokenApprovals[_tokenVIN];
    }

   // @dev Internal function to clear current approval of a given token VIN
   // Reverts if the given address is not indeed the owner of the token
   // @param _owner owner of the token
   // @param _tokenVIN string VIN of the token to be transferred
    function clearApproval(address _owner, string _tokenVIN) internal {
        require(ownerOf(_tokenVIN) == _owner);
        if (tokenApprovals[_tokenVIN] != address(0)) {
            tokenApprovals[_tokenVIN] = address(0);
        }
    }

   // @dev Internal function to remove a token VIN from the list of a given address
   // @param _from address representing the previous owner of the given token VIN
   // @param _tokenVIN string VIN of the token to be removed from the tokens list of the given address
    function removeTokenFrom(address _from, string _tokenVIN) internal {
        require(ownerOf(_tokenVIN) == _from);
        tokenOwner[_tokenVIN] = address(0);
        balances[_from] -= 1;
    }

   // @dev Internal function to add a token VIN to the list of a given address
   // @param _to address representing the new owner of the given token VIN
   // @param _tokenVIN string VIN of the token to be added to the tokens list of the given address
    function addTokenTo(address _to, string _tokenVIN) internal {
        //require(tokenOwner[_tokenVIN] == address(0));
        tokenOwner[_tokenVIN] = _to;
        balances[_to] += 1;
    }

   // @dev Produce a new token
   // Reverts if the given token VIN already exists
   // Reverts if the address token should be given to equals 0
   // @param _to The address that will own the produced token
   // @param _tokenVIN string VIN of the token to be produced by the msg.sender
   // @param _color string color of the produced token
   // @param _regNumeber string regestration number of the produced token
    function _produce(address _to, string _tokenVIN, string _color, string _regNumber) public {
       require(_to != address(0));
        //require(tokenOwner[_tokenVIN] == address(0));
        addTokenTo(_to, _tokenVIN);
        
        
        tokenColor[_tokenVIN] = _color;
        tokenRegNumber[_tokenVIN] = _regNumber;
        totalSupply += 1;
        emit Transfer(address(0), _to, _tokenVIN);
    }

   // @dev Destroy a specific token
   // Reverts if the token does not exist
   // @param _tokenId uint256 ID of the token being burned by the msg.sender
    function _destroy(address _owner, string _tokenVIN) public {
        require(tokenOwner[_tokenVIN] != address(0));
        clearApproval(_owner, _tokenVIN);
        removeTokenFrom(_owner, _tokenVIN);
        delete tokenColor [_tokenVIN];
        delete tokenRegNumber [_tokenVIN];
        totalSupply -= 1;
        emit Transfer(_owner, address(0), _tokenVIN);
    }

   // @dev Gets the color of the specified token VIN
   // @param _tokenVIN string VIN of the token to query the color of
   // @return color string currently marked as the color of the given token VIN
    function getTokenColor(string _tokenVIN) public view returns (string) {
        require(ownerOf(_tokenVIN) != address(0));
        return tokenColor[_tokenVIN];
    }

   // @dev Gets the registration number of the specified token VIN
   // @param _tokenVIN string VIN of the token to query the registration number of
   // @return registration number string currently marked as the registration number of the given token VIN
    function getTokenRegNumber(string _tokenVIN) public view returns (string) {
        require(ownerOf(_tokenVIN) != address(0));
        return tokenRegNumber[_tokenVIN];
    }

   // @dev Change color of specified token VIN
   // Reverts if the given token VIN does not exist
   // Reverts if the given address is not indeed the owner of the token or approved
   // @param _tokenVIN string VIN of the specified token
   // @param _newTokenColor string color the specified token should be set to
    function setTokenColor(string _tokenVIN, string _newTokenColor) public {
        address owner = ownerOf(_tokenVIN);
        require(owner != address(0));
        require(owner == msg.sender || getApproved(_tokenVIN) == msg.sender);
        tokenColor[_tokenVIN] = _newTokenColor;
    }

   // @dev Change registration number of specified token VIN
   // Reverts if the given token VIN does not exist
   // Reverts if the given address is not indeed the owner of the token or approved
   // @param _tokenVIN string VIN of the specified token
   // @param _newTokenColor string registration number the specified token should be set to
    function setTokenRegNumber(string _tokenVIN, string _newTokenRegNumber) public {
        address owner = ownerOf(_tokenVIN);
        require(owner != address(0));
        require(owner == msg.sender || getApproved(_tokenVIN) == msg.sender);
        tokenRegNumber[_tokenVIN] = _newTokenRegNumber;
    }
    
   // @dev Safely transfers the ownership of a given token VIN to another address
   // If the target address is a contract, it must implement `onERC721Received`,
   // which is called upon a safe transfer, and return the magic value
   // `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,
   // the transfer is reverted.
   //
   // Requires the msg sender to be the owner or approved
   // @param _from current owner of the token
   // @param _to address to receive the ownership of the given token VIN
   // @param _tokenVIN string VIN of the token to be transferred
    function safeTransferFrom(address _from, address _to, string _tokenVIN) public {
        safeTransferFrom(_from, _to, _tokenVIN, "");
    }
    
   // @dev Safely transfers the ownership of a given token VIN to another address
   // If the target address is a contract, it must implement `onERC721Received`,
   // which is called upon a safe transfer, and return the magic value
   // `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,
   // the transfer is reverted.
   // Requires the msg sender to be the owner or approved
   // @param _from current owner of the token
   // @param _to address to receive the ownership of the given token VIN
   // @param _tokenVIN string VIN of the token to be transferred
   // @param _data bytes data to send along with a safe transfer check
    function safeTransferFrom(address _from, address _to, string _tokenVIN, bytes _data) public {
        transferFrom(_from, _to, _tokenVIN);
        if (isContract(_to)) {
            bytes4 retval = ERC721Reciever(_to).onERC721Received(_from, _to, _tokenVIN, _data);
            require (retval == ERC721_RECEIVED);
        }
    }
    
   // Returns whether the target address is a contract
   // @dev This function will return false if invoked during the constructor of a contract,
   // as the code is not actually created until after the constructor finishes.
   // @param addr address to check
   // @return whether the target address is a contract
  function isContract(address addr) internal view returns (bool) {
    uint256 size;
    // solium-disable-next-line security/no-inline-assembly
    assembly { size := extcodesize(addr) }
    return size > 0;
  }
  
  function getSerializedData (string _tokenId) public view returns (bytes) {
    address owner = tokenOwner[_tokenId];
    address approvals = tokenApprovals[_tokenId];
    string color = tokenColor[_tokenId];
    string regnumber = tokenRegNumber[_tokenId];
    uint offset = BUFFER_LENGHT; 
    bytes memory buffer = new bytes (BUFFER_LENGHT);
    
    stringToBytes(offset, bytes(color), buffer);
    offset -= sizeOfString(color); 
    stringToBytes(offset, bytes(regnumber), buffer);
    offset -= sizeOfString(regnumber); 
    return buffer;
  }
  
  struct Token {
      address owner;
      address approval;
      string color;
      string regNumber;
  }
  
  function recoveryToken (address owner, string token_id, bytes data) external {
    Token memory token = deserealizeData(owner, token_id, data);
    _produce(token.owner, token_id, token.color, token.regNumber);
    emit tokenRecovered(token.owner, token_id);
  }
  
  /*function demolishToken (string token_id) external onlyAdmittedForDemolish {
    _destroy(tokenOwner[token_id], token_id);
    emit tokenDemolished(tokenOwner[token_id], token_id);
  }*/
  
  function deserealizeData (address owner, string token_id, bytes data) internal returns(Token) {
     
    uint offset = BUFFER_LENGHT;
    string memory color = new string(20);
    bytesToString(offset, data, bytes(color));
    offset -= sizeOfString(color);
    string memory regNumber = new string(20);
    bytesToString(offset, data, bytes(regNumber));
    offset -= sizeOfString(regNumber);
    
    return Token(owner, address(0), color, regNumber);
  }
  
  

}
